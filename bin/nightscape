#!/usr/bin/perl6




use v6;




# -----------------------------------------------------------------------------
# setup
# -----------------------------------------------------------------------------

use Nightscape::Config;

# global config options, extracted from on disk conf and cmdline flags
our $CONF = Nightscape::Config.new;




# -----------------------------------------------------------------------------
# main
# -----------------------------------------------------------------------------

# requires pacman for querying cached txnpkgs
multi sub MAIN(
    'list',
    Str:D $txnpkg-name,
    Str:D :$cache-dir = "%*ENV<HOME>/.nightscape/db";
    Str :c(:$config),
    Str :$data-dir,
    Str :$log-dir,
    Str :$price-dir
)
{
    # get hash of txnpkgs ($pkgname => $pkgver)
    my Hash:D %txnpkgs{Str:D} = Qx<
        pacman -Qg txn | awk '{print $2}'
    >.trim.split("\n").map({
        my Str:D $pkg = qqx<pacman -Q $_>.trim;
        my Str:D $pkgname = $pkg.split(/\s+/)[0].trim;
        my Str:D $pkgver = $pkg.split(/\s+/)[1].split('-')[0].trim;
        my Int:D $pkgrel = Int($pkg.split(/\s+/)[1].split('-')[1].trim);
        $pkgname => %(:version($pkgver), :release($pkgrel));
    });

    # quote txnpkg-names for literal regex interpretation
    my Str:D @txnpkg-names =
        %txnpkgs.keys».subst(/(.*)/, -> $/ {"'" ~ $0 ~ "'"});

    # ensure txnpkg exists
    unless $txnpkg-name ~~ /<{@txnpkg-names}>/
    {
        die "Sorry, txnpkg 「$txnpkg-name」 missing";
    }

    # is txnpkg readable?
    my Str:D $txnpkg-ver = %txnpkgs{$txnpkg-name}<version>;
    my Int:D $txnpkg-rel = %txnpkgs{$txnpkg-name}<release>;
    my Str:D $txnpkg-path =
        "$cache-dir/$txnpkg-name-$txnpkg-ver-$txnpkg-rel.txn.tar.xz";

    unless $txnpkg-path.IO.r
    {
        die "Sorry, txnpkg not readable. Check permissions.";
    }

    # extract tarball to tmpdir
    my Str:D $build-root = '/dev/shm/' ~ "$txnpkg-name-$txnpkg-ver-$txnpkg-rel";
    mkdir $build-root;
    shell "tar -xvf $txnpkg-path -C $build-root";
    my Str:D $json = slurp "$build-root/txn.json";

    # clean up build root
    dir($build-root)».unlink;
    rmdir $build-root;

    # initialize config profile from cmdline args
    {
        # assemble config from cmdline args
        my %config;

        # was --config cmdline arg passed?
        if $config
        {
            # check config file passed as cmdline arg exists
            if $config.IO.e
            {
                %config<config-file> = "$config";
            }
            else
            {
                die "Sorry, couldn't locate the given config file: $config";
            }
        }
        else
        {
            # make default config directory if it doesn't exist
            my Str $config-dir = IO::Path.new($CONF.config-file).dirname;
            unless $config-dir.IO.d
            {
                say "Config directory doesn't exist.";
                print "Creating config directory in $config-dir… ";
                mkdir "$config-dir"
                    or die "Sorry, couldn't create config directory: ",
                        $config-dir;
                say "done.";
            }
            # write default config file if it doesn't exist
            unless $CONF.config-file.IO.e
            {
                my Str $config-text = q:to/EOCONF/;
                base-currency = "USD"
                EOCONF
                print "Placing default config file at ", $CONF.config-file, "… ";
                spurt $CONF.config-file, $config-text, :createonly;
                say "done.";
            }
        }

        if $data-dir
        {
            # check data dir passed as cmdline arg exists
            if $data-dir.IO.d
            {
                %config<data-dir> = "$data-dir";
            }
            else
            {
                die "Sorry, couldn't locate the given data directory: ",
                    $data-dir;
            }
        }
        else
        {
            # make default data directory if it doesn't exist
            unless $CONF.data-dir.IO.d
            {
                say "Data directory doesn't exist.";
                print "Creating data directory in ", $CONF.data-dir, "… ";
                mkdir $CONF.data-dir
                    or die "Sorry, couldn't create data directory: ",
                        $CONF.data-dir;
                say "done.";
            }
        }

        if $log-dir
        {
            # check log dir passed as cmdline arg exists
            if $log-dir.IO.d
            {
                %config<log-dir> = "$log-dir";
            }
            else
            {
                die "Sorry, couldn't locate the given log directory: ",
                    $log-dir;
            }
        }
        else
        {
            # make default log directory if it doesn't exist
            unless $CONF.log-dir.IO.d
            {
                say "Log directory doesn't exist.";
                print "Creating log directory in ", $CONF.log-dir, "… ";
                mkdir $CONF.log-dir
                    or die "Sorry, couldn't create log directory: ",
                        $CONF.log-dir;
                say "done.";
            }
        }

        if $price-dir
        {
            # check price dir passed as cmdline arg exists
            if $price-dir.IO.d
            {
                %config<price-dir> = "$price-dir";
            }
            else
            {
                die "Sorry, couldn't locate the given price directory: ",
                    $price-dir;
            }
        }
        else
        {
            # make default price directory if it doesn't exist
            unless $CONF.price-dir.IO.d
            {
                say "Price directory doesn't exist.";
                print "Creating price directory in ", $CONF.price-dir, "… ";
                mkdir $CONF.price-dir
                    or die "Sorry, couldn't create price directory: ",
                        $CONF.price-dir;
                say "done.";
            }
        }

        # apply config
        $CONF = Nightscape::Config.new(|%config);
    }

    # prepare assets and entities for transaction journal parsing
    {
        # parse TOML config
        my %toml;
        try
        {
            use Config::TOML;
            my Str $toml-text = slurp $CONF.config-file
                or die "Sorry, couldn't read config file: ", $CONF.config-file;
            # assume UTC when local offset unspecified in TOML dates
            %toml = from-toml($toml-text, :date-local-offset(0));
            CATCH
            {
                say "Sorry, couldn't parse TOML syntax in config file: ",
                    $CONF.config-file;
            }
        }

        # set base currency
        $CONF.base-currency = %toml<base-currency> if %toml<base-currency>;

        # set base costing method
        $CONF.base-costing = %toml<base-costing> if %toml<base-costing>;

        # populate asset settings
        my %assets-found = Nightscape::Config.detoml-assets(%toml);
        if %assets-found
        {
            for %assets-found.kv -> $asset-code, $asset-data
            {
                $CONF.assets{$asset-code} = Nightscape::Config.gen-settings(
                    :$asset-code,
                    :$asset-data
                );
            }
        }

        # populate entity settings
        my %entities-found = Nightscape::Config.detoml-entities(%toml);
        if %entities-found
        {
            for %entities-found.kv -> $entity-name, $entity-data
            {
                $CONF.entities{$entity-name} = Nightscape::Config.gen-settings(
                    :$entity-name,
                    :$entity-data
                );
            }
        }
    }

    say q:to/EOF/;
    Diagnostics
    ===========
    EOF

    say q:to/EOF/;
    Journal
    -------
    EOF
    use Nightscape;
    .say for Nightscape.ls-entries(:$json, :sort);

    say "\n", q:to/EOF/;
    Config
    ------
    EOF
    say $CONF.perl;
}

multi sub MAIN(
    Str:D $file,
    Str :c(:$config),
    Str :$data-dir,
    Str :$log-dir,
    Str :$price-dir
)
{
    # initialize config profile from cmdline args
    {
        # assemble config from cmdline args
        my %config;

        # was --config cmdline arg passed?
        if $config
        {
            # check config file passed as cmdline arg exists
            if $config.IO.e
            {
                %config<config-file> = "$config";
            }
            else
            {
                die "Sorry, couldn't locate the given config file: $config";
            }
        }
        else
        {
            # make default config directory if it doesn't exist
            my Str $config-dir = IO::Path.new($CONF.config-file).dirname;
            unless $config-dir.IO.d
            {
                say "Config directory doesn't exist.";
                print "Creating config directory in $config-dir… ";
                mkdir "$config-dir"
                    or die "Sorry, couldn't create config directory: ",
                        $config-dir;
                say "done.";
            }
            # write default config file if it doesn't exist
            unless $CONF.config-file.IO.e
            {
                my Str $config-text = q:to/EOCONF/;
                base-currency = "USD"
                EOCONF
                print "Placing default config file at ", $CONF.config-file, "… ";
                spurt $CONF.config-file, $config-text, :createonly;
                say "done.";
            }
        }

        if $data-dir
        {
            # check data dir passed as cmdline arg exists
            if $data-dir.IO.d
            {
                %config<data-dir> = "$data-dir";
            }
            else
            {
                die "Sorry, couldn't locate the given data directory: ",
                    $data-dir;
            }
        }
        else
        {
            # make default data directory if it doesn't exist
            unless $CONF.data-dir.IO.d
            {
                say "Data directory doesn't exist.";
                print "Creating data directory in ", $CONF.data-dir, "… ";
                mkdir $CONF.data-dir
                    or die "Sorry, couldn't create data directory: ",
                        $CONF.data-dir;
                say "done.";
            }
        }

        if $log-dir
        {
            # check log dir passed as cmdline arg exists
            if $log-dir.IO.d
            {
                %config<log-dir> = "$log-dir";
            }
            else
            {
                die "Sorry, couldn't locate the given log directory: ",
                    $log-dir;
            }
        }
        else
        {
            # make default log directory if it doesn't exist
            unless $CONF.log-dir.IO.d
            {
                say "Log directory doesn't exist.";
                print "Creating log directory in ", $CONF.log-dir, "… ";
                mkdir $CONF.log-dir
                    or die "Sorry, couldn't create log directory: ",
                        $CONF.log-dir;
                say "done.";
            }
        }

        if $price-dir
        {
            # check price dir passed as cmdline arg exists
            if $price-dir.IO.d
            {
                %config<price-dir> = "$price-dir";
            }
            else
            {
                die "Sorry, couldn't locate the given price directory: ",
                    $price-dir;
            }
        }
        else
        {
            # make default price directory if it doesn't exist
            unless $CONF.price-dir.IO.d
            {
                say "Price directory doesn't exist.";
                print "Creating price directory in ", $CONF.price-dir, "… ";
                mkdir $CONF.price-dir
                    or die "Sorry, couldn't create price directory: ",
                        $CONF.price-dir;
                say "done.";
            }
        }

        # apply config
        $CONF = Nightscape::Config.new(|%config);
    }

    # prepare assets and entities for transaction journal parsing
    {
        # parse TOML config
        my %toml;
        try
        {
            use Config::TOML;
            my Str $toml-text = slurp $CONF.config-file
                or die "Sorry, couldn't read config file: ", $CONF.config-file;
            # assume UTC when local offset unspecified in TOML dates
            %toml = from-toml($toml-text, :date-local-offset(0));
            CATCH
            {
                say "Sorry, couldn't parse TOML syntax in config file: ",
                    $CONF.config-file;
            }
        }

        # set base currency
        $CONF.base-currency = %toml<base-currency> if %toml<base-currency>;

        # set base costing method
        $CONF.base-costing = %toml<base-costing> if %toml<base-costing>;

        # populate asset settings
        my %assets-found = Nightscape::Config.detoml-assets(%toml);
        if %assets-found
        {
            for %assets-found.kv -> $asset-code, $asset-data
            {
                $CONF.assets{$asset-code} = Nightscape::Config.gen-settings(
                    :$asset-code,
                    :$asset-data
                );
            }
        }

        # populate entity settings
        my %entities-found = Nightscape::Config.detoml-entities(%toml);
        if %entities-found
        {
            for %entities-found.kv -> $entity-name, $entity-data
            {
                $CONF.entities{$entity-name} = Nightscape::Config.gen-settings(
                    :$entity-name,
                    :$entity-data
                );
            }
        }
    }

    say q:to/EOF/;
    Diagnostics
    ===========
    EOF

    if $file.IO.e
    {
        say q:to/EOF/;
        Journal
        -------
        EOF
        use Nightscape;
        .say for Nightscape.ls-entries(:$file, :sort);
    }
    else
    {
        die "Sorry, couldn't locate file 「$file」";
    }

    say "\n", q:to/EOF/;
    Config
    ------
    EOF
    say $CONF.perl;
}




# -----------------------------------------------------------------------------
# usage
# -----------------------------------------------------------------------------

sub USAGE()
{
    my Str $help-text = q:to/EOF/;
    Usage:
      nightscape [-h] [--config=CONFIG_FILE] TRANSACTION_JOURNAL

    optional arguments:
      -c, --config=CONFIG_FILE
        the location of the configuration file
      --data-dir=DATA_DIR
        the location of the general data directory
      --log-dir=LOG_DIR
        the location of the log directory
      --price-dir=PRICE_DIR
        the location of the asset price directory
    EOF
    say $help-text.trim;
}

# vim: ft=perl6
